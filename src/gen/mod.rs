mod rewrite;
mod transfer;

use crate::{Aig, Mig, Node, Xag, Xmg};
use indoc::formatdoc;

pub fn network_ffi<N: Node>() -> String {
    formatdoc!(
        r#"
        #include <{}>
        namespace eggmock {{
        {}{}{}{}{}
        }}
        "#,
        N::NTK_MOCKTURTLE_INCLUDE,
        transfer::receiver_struct::<N>(),
        transfer::send_helper::<N>(),
        transfer::receive_helper::<N>(),
        rewrite::rewrite_struct::<N>(),
        rewrite::rewrite_helper::<N>()
    )
}

pub fn ffi_header() -> String {
    formatdoc!(
        r#"
        // Automatically generated by eggmock v{}
        #pragma once

        #include <cstddef>
        #include <cstdint>
        #include <stdexcept>

        namespace eggmock
        {{
        struct signal
        {{
          uint32_t _v;

          signal() : _v(0) {{}}
          explicit signal( uint32_t value ) : _v( value ) {{}}
          signal( uint32_t id, bool complemented ) : _v( id ^ ( static_cast<uint32_t>( complemented == 1 ) << 31) ) {{}}

          uint32_t id() const
          {{
            return _v & ~( static_cast<uint32_t>( 1 ) << 31 );
          }}
          bool is_complemented() const
          {{
            return ( _v & ( static_cast<uint32_t>( 1 ) << 31 ) ) != 0;
          }}
          signal complement() const
          {{
            return signal( _v ^ ( static_cast<uint32_t>( 1 ) << 31 ) );
          }}
        }};
        }}

        {}
        {}
        {}
        {}
        "#,
        env!("CARGO_PKG_VERSION"),
        network_ffi::<Mig>(),
        network_ffi::<Aig>(),
        network_ffi::<Xag>(),
        network_ffi::<Xmg>()
    )
}
